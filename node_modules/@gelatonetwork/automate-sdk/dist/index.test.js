"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = __importDefault(require("dotenv"));
const ethers_1 = require("ethers");
const lib_1 = require("./lib");
const types_1 = require("./types");
dotenv_1.default.config();
if (!process.env.PK)
    throw new Error("Missing env PK");
const pk = process.env.PK;
if (!process.env.PROVIDER_URL)
    throw new Error("Missing env PROVIDER_URL");
const providerUrl = process.env.PROVIDER_URL;
const chainId = 80002; // amoy
const counterAddress = "0xEEeBe2F778AA186e88dCf2FEb8f8231565769C27"; // amoy Counter Contract
const counterAbi = ["function increment() external"];
const counterInterface = new ethers_1.ethers.utils.Interface(counterAbi);
const main = () => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new ethers_1.ethers.providers.JsonRpcProvider(providerUrl);
    const wallet = new ethers_1.ethers.Wallet(pk, provider);
    const sdk = yield lib_1.AutomateSDK.create(chainId, wallet);
    const { taskId, tx } = yield sdk.createTask({
        name: "AutomateSdkTest",
        execAddress: counterAddress,
        execSelector: counterInterface.getSighash("increment"),
        execData: counterInterface.encodeFunctionData("increment"),
        dedicatedMsgSender: true,
        singleExec: true,
        trigger: {
            type: types_1.TriggerType.TIME,
            start: (yield provider.getBlock("latest")).timestamp + 300,
            interval: 60 * 1000,
        },
    }, {
        gasPrice: ethers_1.ethers.utils.parseUnits("60", "gwei"),
    });
    console.log("TaskId:", taskId);
    yield tx.wait();
    console.log("Transaction hash", tx.hash);
});
main()
    .then(() => {
    process.exit();
})
    .catch((err) => {
    console.error(err);
    process.exit(1);
});
