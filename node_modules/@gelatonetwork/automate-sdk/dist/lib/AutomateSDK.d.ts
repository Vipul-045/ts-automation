import "ethers";
import { Signer } from "@ethersproject/abstract-signer";
import { Overrides } from "ethers";
import { CancelTaskPopulatedTransaction, Config, CreateBatchExecTaskOptions, CreateTaskOptions, CreateTaskOptionsWithModules, CreateTaskPopulatedTransaction, Task, TaskTransaction } from "../types";
export declare class AutomateSDK {
    private _automateModule;
    private readonly _chainId;
    private readonly _signer;
    private _automate;
    private _opsProxyFactory;
    private readonly _taskApi;
    private readonly _signature;
    private constructor();
    static create(chainId: number, signer: Signer, signatureMessage?: string, config?: Partial<Config>): Promise<AutomateSDK>;
    getActiveTasks(creatorAddress?: string): Promise<Task[]>;
    private _getDedicatedMsgSender;
    private _getOpsProxyFactory;
    getDedicatedMsgSender(): Promise<{
        address: string;
        isDeployed: boolean;
    }>;
    getTaskId(_args: CreateTaskOptions, creatorAddress?: string): Promise<string>;
    protected _getTaskId(args: CreateTaskOptionsWithModules, creatorAddress?: string): Promise<string>;
    protected _getLegacyTaskId(args: CreateTaskOptionsWithModules, creatorAddress: string): Promise<string>;
    private _prepareBatchCreateTaskOptions;
    prepareBatchExecTask(args: CreateBatchExecTaskOptions, overrides?: Overrides, creatorAddress?: string): Promise<CreateTaskPopulatedTransaction>;
    createBatchExecTask(args: CreateBatchExecTaskOptions, overrides?: Overrides, authToken?: string): Promise<TaskTransaction>;
    prepareTask(_args: CreateTaskOptions, overrides?: Overrides, creatorAddress?: string): Promise<CreateTaskPopulatedTransaction>;
    createTask(_args: CreateTaskOptions, overrides?: Overrides, authToken?: string): Promise<TaskTransaction>;
    private _processModules;
    private _finalizeTaskCreation;
    prepareCancelTask(taskId: string, overrides?: Overrides): Promise<CancelTaskPopulatedTransaction>;
    cancelTask(taskId: string, overrides?: Overrides): Promise<TaskTransaction>;
    /**
     * @deprecated this function will be removed in next major upgrade
     */
    isGnosisSafeApp: () => boolean;
    private _setTaskName;
    renameTask(taskId: string, name: string, authToken?: string): Promise<void>;
    private _setContractAbi;
    private _postTaskApi;
    private static _fetchAutomateAddress;
}
