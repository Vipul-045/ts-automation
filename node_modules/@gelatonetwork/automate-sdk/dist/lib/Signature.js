"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Signature = void 0;
const buffer_1 = require("buffer");
const siwe_1 = require("siwe");
class Signature {
    constructor(chainId, signer, signatureMessage, signatureDomain) {
        this._timeTillExpiration = 600000;
        this._expirationBuffer = 300000;
        this._chainId = chainId;
        this._signer = signer;
        this._signatureMessage = signatureMessage !== null && signatureMessage !== void 0 ? signatureMessage : "Gelato Web3Functions";
        this._signatureDomain = signatureDomain !== null && signatureDomain !== void 0 ? signatureDomain : "beta.app.gelato.network";
    }
    getAuthToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const timeNow = Date.now();
            if (!this._token ||
                !this._lastExpirationTime ||
                timeNow > this._lastExpirationTime - this._expirationBuffer)
                yield this._requestAndStoreSignature();
            return this._token;
        });
    }
    _requestAndStoreSignature() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const domain = this._signatureDomain;
                const uri = `https://${domain}/`;
                const address = yield this._signer.getAddress();
                const version = "1";
                const chainId = this._chainId;
                const statement = this._signatureMessage;
                const expirationTimestamp = Date.now() + this._timeTillExpiration;
                const expirationTime = new Date(expirationTimestamp).toISOString();
                const siweMessage = new siwe_1.SiweMessage({
                    domain,
                    statement,
                    uri,
                    address,
                    version,
                    chainId,
                    expirationTime,
                });
                const message = siweMessage.prepareMessage();
                const signature = yield this._signer.signMessage(message);
                const authToken = buffer_1.Buffer.from(JSON.stringify({ message, signature })).toString("base64");
                this._token = authToken;
                this._lastExpirationTime = expirationTimestamp;
            }
            catch (err) {
                throw new Error(`Signing message failed. \n${err.message}`);
            }
        });
    }
}
exports.Signature = Signature;
